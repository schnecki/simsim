
==================== FINAL INTERFACE ====================
2017-11-16 12:51:24.454443745 UTC

interface simsim-0.1.0.0-KAtxr7wc8AtIoXggvLGZsd:SimSim.Block 8002
  interface hash: 388072b203e225dda15777331e4f4cc1
  ABI hash: 447d9b4a5bcdc3e451450d02be5fd8a7
  export-list hash: c18506d2c163874b6caa718ebd66db42
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c94e1a01e1524d987e85394b726fa86e
  sig of: Nothing
  used TH splices: False
  where
exports:
  SimSim.Block.Block{SimSim.Block.FGI SimSim.Block.Machine SimSim.Block.Queue SimSim.Block.Sink SimSim.Block.Source}
module dependencies:
package dependencies: ReadArgs-1.2.3@ReadArgs-1.2.3-FZlTw1cmwFABXd9Qu17GpK
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      basic-prelude-0.6.1.1@basic-prelude-0.6.1.1-888xsTDtS2CGSoHb1JadEF
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      chunked-data-0.3.0@chunked-data-0.3.0-OOunTfArGE2y1nE8RKgW4
                      classy-prelude-1.2.0.1@classy-prelude-1.2.0.1-DI7QyZr6dYQLSGY5Zda29N
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      constraints-0.9.1@constraints-0.9.1-5mmQfXdFR8IpJ6JZxzjTB
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      dlist-instances-0.1.1.1@dlist-instances-0.1.1.1-JrfDmjAHlXKJeRjjD0rY07
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      keys-3.11@keys-3.11-3rCPtsJiP6i6WPjfB1rcVT
                      lifted-async-0.9.3@lifted-async-0.9.3-1Yr94BjFrURGjFULK2k39c
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      monad-unlift-0.2.0@monad-unlift-0.2.0-JaCplLBosjYCz9UWF6Saxw
                      mono-traversable-1.0.2.1@mono-traversable-1.0.2.1-7cD9xrLpSxs61tMXUUbUIV
                      mono-traversable-instances-0.1.0.0@mono-traversable-instances-0.1.0.0-cMPVlKCPiiIbLvZydxEFB
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R
                      pointed-5@pointed-5-GlRizu1aJXO3QG4Xelc8BV
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      safe-exceptions-0.1.6.0@safe-exceptions-0.1.6.0-8HmohVTen8f1fXhFM1N1R3
                      say-0.1.0.0@say-0.1.0.0-4kg0VW7izQr10eu93ritVO
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      stm-chans-3.0.0.4@stm-chans-3.0.0.4-JX6Y7GVvdkg3BduVhEnPWu
                      system-filepath-0.4.13.4@system-filepath-0.4.13.4-1Onr71muBMoJ4AF6FUpTVo
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      vector-algorithms-0.7.0.1@vector-algorithms-0.7.0.1-1qlx0Hst1Fo5WZd0lT7Iw1
                      vector-instances-3.4@vector-instances-3.4-6qKuR7R2wDjElztDeslDO1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         mono-traversable-instances-0.1.0.0@mono-traversable-instances-0.1.0.0-cMPVlKCPiiIbLvZydxEFB:Data.MonoTraversable.Instances
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         system-filepath-0.4.13.4@system-filepath-0.4.13.4-1Onr71muBMoJ4AF6FUpTVo:Filesystem.Path
         system-filepath-0.4.13.4@system-filepath-0.4.13.4-1Onr71muBMoJ4AF6FUpTVo:Filesystem.Path.CurrentOS
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
         vector-instances-3.4@vector-instances-3.4-6qKuR7R2wDjElztDeslDO1:Data.Vector.Instances
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         constraints-0.9.1@constraints-0.9.1-5mmQfXdFR8IpJ6JZxzjTB:Data.Constraint.Forall
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         keys-3.11@keys-3.11-3rCPtsJiP6i6WPjfB1rcVT:Data.Key
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         mono-traversable-1.0.2.1@mono-traversable-1.0.2.1-7cD9xrLpSxs61tMXUUbUIV:Data.Containers
                         mono-traversable-1.0.2.1@mono-traversable-1.0.2.1-7cD9xrLpSxs61tMXUUbUIV:Data.MonoTraversable
                         mono-traversable-1.0.2.1@mono-traversable-1.0.2.1-7cD9xrLpSxs61tMXUUbUIV:Data.NonNull
                         mono-traversable-1.0.2.1@mono-traversable-1.0.2.1-7cD9xrLpSxs61tMXUUbUIV:Data.Sequences
                         mono-traversable-instances-0.1.0.0@mono-traversable-instances-0.1.0.0-cMPVlKCPiiIbLvZydxEFB:Data.MonoTraversable.Instances
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.BRef
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.Class
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.DLList
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.Deque
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.PRef
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.SRef
                         mutable-containers-0.3.3@mutable-containers-0.3.3-LD59mBwpMYWF0vy4UyNV9R:Data.Mutable.URef
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
                         vector-instances-3.4@vector-instances-3.4-6qKuR7R2wDjElztDeslDO1:Data.Vector.Instances
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  classy-prelude-1.2.0.1@classy-prelude-1.2.0.1-DI7QyZr6dYQLSGY5Zda29N:ClassyPrelude 3ba46d72eee6022c7e55d87d83c8d916
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
9aadd58519ace323b32a8a94b3067184
  $fEqBlock :: GHC.Classes.Eq SimSim.Block.Block
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SimSim.Block.Block
                  SimSim.Block.$fEqBlock_$c==
                  SimSim.Block.$fEqBlock_$c/= -}
9aadd58519ace323b32a8a94b3067184
  $fEqBlock_$c/= ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: SimSim.Block.Block)
                   (b :: SimSim.Block.Block) ->
                 case a of wild {
                   SimSim.Block.Source
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SimSim.Block.Source -> GHC.Types.False }
                   SimSim.Block.Sink
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SimSim.Block.Sink -> GHC.Types.False }
                   SimSim.Block.FGI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SimSim.Block.FGI -> GHC.Types.False }
                   SimSim.Block.Machine a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }
                   SimSim.Block.Queue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fEqBlock_$c== ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SimSim.Block.Block)
                   (ds1 :: SimSim.Block.Block) ->
                 case ds of wild {
                   SimSim.Block.Source
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SimSim.Block.Source -> GHC.Types.True }
                   SimSim.Block.Sink
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SimSim.Block.Sink -> GHC.Types.True }
                   SimSim.Block.FGI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SimSim.Block.FGI -> GHC.Types.True }
                   SimSim.Block.Machine a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Machine b1 -> GHC.Classes.eqInt a1 b1 }
                   SimSim.Block.Queue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Queue b1 -> GHC.Classes.eqInt a1 b1 } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock :: GHC.Classes.Ord SimSim.Block.Block
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SimSim.Block.Block
                  SimSim.Block.$fEqBlock
                  SimSim.Block.$fOrdBlock_$ccompare
                  SimSim.Block.$fOrdBlock_$c<
                  SimSim.Block.$fOrdBlock_$c<=
                  SimSim.Block.$fOrdBlock_$c>
                  SimSim.Block.$fOrdBlock_$c>=
                  SimSim.Block.$fOrdBlock_$cmax
                  SimSim.Block.$fOrdBlock_$cmin -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$c< ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source
                   -> case y of wild1 {
                        SimSim.Block.Source -> GHC.Types.False
                        SimSim.Block.Sink -> GHC.Types.True
                        SimSim.Block.FGI -> GHC.Types.True
                        SimSim.Block.Machine ds -> GHC.Types.True
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.FGI -> GHC.Types.True
                        SimSim.Block.Machine ds -> GHC.Types.True
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Machine ds -> GHC.Types.True
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# x# y#) } }
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x# y#) } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$c<= ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source
                   -> case y of wild1 { DEFAULT -> GHC.Types.True }
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        SimSim.Block.Source -> GHC.Types.False
                        SimSim.Block.Sink -> GHC.Types.True
                        SimSim.Block.FGI -> GHC.Types.True
                        SimSim.Block.Machine ds -> GHC.Types.True
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.FGI -> GHC.Types.True
                        SimSim.Block.Machine ds -> GHC.Types.True
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x# y#)
                             GHC.Types.True -> GHC.Types.True } } }
                        SimSim.Block.Queue ds -> GHC.Types.True }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x# y#)
                             GHC.Types.True -> GHC.Types.True } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$c> ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source
                   -> case y of wild1 { DEFAULT -> GHC.Types.False }
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        SimSim.Block.Source -> GHC.Types.True
                        SimSim.Block.Sink -> GHC.Types.False
                        SimSim.Block.FGI -> GHC.Types.False
                        SimSim.Block.Machine ds -> GHC.Types.False
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.FGI -> GHC.Types.False
                        SimSim.Block.Machine ds -> GHC.Types.False
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } } }
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$c>= ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source
                   -> case y of wild1 {
                        SimSim.Block.Source -> GHC.Types.True
                        SimSim.Block.Sink -> GHC.Types.False
                        SimSim.Block.FGI -> GHC.Types.False
                        SimSim.Block.Machine ds -> GHC.Types.False
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.FGI -> GHC.Types.False
                        SimSim.Block.Machine ds -> GHC.Types.False
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Machine ds -> GHC.Types.False
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }
                        SimSim.Block.Queue ds -> GHC.Types.False }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$ccompare ::
    SimSim.Block.Block -> SimSim.Block.Block -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: SimSim.Block.Block)
                   (b :: SimSim.Block.Block) ->
                 case a of wild {
                   SimSim.Block.Source
                   -> case b of wild1 {
                        SimSim.Block.Source -> GHC.Types.EQ
                        SimSim.Block.Sink -> GHC.Types.LT
                        SimSim.Block.FGI -> GHC.Types.LT
                        SimSim.Block.Machine ds -> GHC.Types.LT
                        SimSim.Block.Queue ds -> GHC.Types.LT }
                   SimSim.Block.Sink
                   -> case b of wild1 {
                        SimSim.Block.Source -> GHC.Types.GT
                        SimSim.Block.Sink -> GHC.Types.EQ
                        SimSim.Block.FGI -> GHC.Types.LT
                        SimSim.Block.Machine ds -> GHC.Types.LT
                        SimSim.Block.Queue ds -> GHC.Types.LT }
                   SimSim.Block.FGI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SimSim.Block.FGI -> GHC.Types.EQ
                        SimSim.Block.Machine ds -> GHC.Types.LT
                        SimSim.Block.Queue ds -> GHC.Types.LT }
                   SimSim.Block.Machine a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SimSim.Block.Machine b1 -> GHC.Classes.compareInt a1 b1
                        SimSim.Block.Queue ds -> GHC.Types.LT }
                   SimSim.Block.Queue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SimSim.Block.Queue b1 -> GHC.Classes.compareInt a1 b1 } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$cmax ::
    SimSim.Block.Block -> SimSim.Block.Block -> SimSim.Block.Block
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source -> y
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        DEFAULT -> SimSim.Block.Sink
                        SimSim.Block.FGI -> SimSim.Block.FGI
                        SimSim.Block.Machine ds -> wild1
                        SimSim.Block.Queue ds -> wild1 }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> SimSim.Block.FGI
                        SimSim.Block.Machine ds -> wild1
                        SimSim.Block.Queue ds -> wild1 }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> wild
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> wild GHC.Types.True -> wild1 }
                             GHC.Types.True -> wild1 } } }
                        SimSim.Block.Queue ds -> wild1 }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> wild
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> wild GHC.Types.True -> wild1 }
                             GHC.Types.True -> wild1 } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fOrdBlock_$cmin ::
    SimSim.Block.Block -> SimSim.Block.Block -> SimSim.Block.Block
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block)
                   (y :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source
                   -> case y of wild1 { DEFAULT -> SimSim.Block.Source }
                   SimSim.Block.Sink
                   -> case y of wild1 {
                        SimSim.Block.Source -> SimSim.Block.Source
                        SimSim.Block.Sink -> SimSim.Block.Sink
                        SimSim.Block.FGI -> SimSim.Block.Sink
                        SimSim.Block.Machine ds -> SimSim.Block.Sink
                        SimSim.Block.Queue ds -> SimSim.Block.Sink }
                   SimSim.Block.FGI
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        SimSim.Block.FGI -> SimSim.Block.FGI
                        SimSim.Block.Machine ds -> SimSim.Block.FGI
                        SimSim.Block.Queue ds -> SimSim.Block.FGI }
                   SimSim.Block.Machine a1
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        SimSim.Block.Machine b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> wild1 GHC.Types.True -> wild }
                             GHC.Types.True -> wild } } }
                        SimSim.Block.Queue ds -> wild }
                   SimSim.Block.Queue a1
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        SimSim.Block.Queue b1
                        -> case a1 of wild2 { GHC.Types.I# x# ->
                           case b1 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> wild1 GHC.Types.True -> wild }
                             GHC.Types.True -> wild } } } } }) -}
9aadd58519ace323b32a8a94b3067184
  $fShowBlock :: GHC.Show.Show SimSim.Block.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SimSim.Block.Block
                  SimSim.Block.$fShowBlock_$cshowsPrec
                  SimSim.Block.$fShowBlock_$cshow
                  SimSim.Block.$fShowBlock_$cshowList -}
9aadd58519ace323b32a8a94b3067184
  $fShowBlock1 :: SimSim.Block.Block -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (SimSim.Block.$fShowBlock_$cshowsPrec
                   SimSim.Block.$fShowBlock2) -}
2c557c77674f6b8e1d3ed1fcc5fc1ef4
  $fShowBlock2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
11e30e9d88fa5749fcdcae665c16fc05
  $fShowBlock3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Queue "#) -}
fc90c2f94bf38d8e48bad44500f3539c
  $fShowBlock4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Machine "#) -}
6f55f3e303bec0ea65634be5c75557b4
  $fShowBlock5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FGI"#) -}
3c2ee327de5bf64940ec14d96160f5e5
  $fShowBlock6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sink"#) -}
6daf0c04d6e74bfdf59379081cb181f2
  $fShowBlock7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Source"#) -}
9aadd58519ace323b32a8a94b3067184
  $fShowBlock_$cshow :: SimSim.Block.Block -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: SimSim.Block.Block) ->
                 case x of wild {
                   SimSim.Block.Source -> SimSim.Block.$fShowBlock7
                   SimSim.Block.Sink -> SimSim.Block.$fShowBlock6
                   SimSim.Block.FGI -> SimSim.Block.$fShowBlock5
                   SimSim.Block.Machine b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SimSim.Block.$fShowBlock4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   SimSim.Block.Queue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SimSim.Block.$fShowBlock3
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
9aadd58519ace323b32a8a94b3067184
  $fShowBlock_$cshowList :: [SimSim.Block.Block] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SimSim.Block.Block
                   SimSim.Block.$fShowBlock1) -}
9aadd58519ace323b32a8a94b3067184
  $fShowBlock_$cshowsPrec ::
    GHC.Types.Int -> SimSim.Block.Block -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: SimSim.Block.Block)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   SimSim.Block.Source
                   -> GHC.Base.++ @ GHC.Types.Char SimSim.Block.$fShowBlock7 eta
                   SimSim.Block.Sink
                   -> GHC.Base.++ @ GHC.Types.Char SimSim.Block.$fShowBlock6 eta
                   SimSim.Block.FGI
                   -> GHC.Base.++ @ GHC.Types.Char SimSim.Block.$fShowBlock5 eta
                   SimSim.Block.Machine b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SimSim.Block.$fShowBlock4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SimSim.Block.$fShowBlock4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   SimSim.Block.Queue b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SimSim.Block.$fShowBlock3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SimSim.Block.$fShowBlock3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } } }) -}
1b5685baa0ebdadee24afb7b759d30a2
  $tc'FGI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2633096796941327257##
                   13206561532113502652##
                   SimSim.Block.$trModule
                   SimSim.Block.$tc'FGI1) -}
06da036d8bf0ba1490570b0804f43f7d
  $tc'FGI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FGI"#) -}
8895af2748444c24f78196279e170d03
  $tc'Machine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16151136168019540928##
                   9432673191703702113##
                   SimSim.Block.$trModule
                   SimSim.Block.$tc'Machine1) -}
a55816483fda053548cf97bde3d6a3fd
  $tc'Machine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Machine"#) -}
4e0bc5e0c4208f85f3639609f0cc6c40
  $tc'Queue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15519043851647686874##
                   7243691904287605460##
                   SimSim.Block.$trModule
                   SimSim.Block.$tc'Queue1) -}
720751d31b4cb2d27546ed34d4b7753b
  $tc'Queue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Queue"#) -}
64af7995bc885a42b09bae88e49f213c
  $tc'Sink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   106778093930193344##
                   9151427533125560784##
                   SimSim.Block.$trModule
                   SimSim.Block.$tc'Sink1) -}
2f89b68af3aa42520906f4853012c0b6
  $tc'Sink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sink"#) -}
409996092c2c23540bfb609aec40a58d
  $tc'Source :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17066357143395030801##
                   7590946918258772685##
                   SimSim.Block.$trModule
                   SimSim.Block.$tc'Source1) -}
8db8ab3abb85df0f34b6df6a1339d505
  $tc'Source1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Source"#) -}
177a52fc62a4027deff931503adb06c4
  $tcBlock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1129000288765269352##
                   14598868951033645267##
                   SimSim.Block.$trModule
                   SimSim.Block.$tcBlock1) -}
78b8247c660845802be956919d7eb484
  $tcBlock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Block"#) -}
bf6f5f942b88b6a5e54fa96d9f2ffa14
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SimSim.Block.$trModule2
                   SimSim.Block.$trModule1) -}
5215d3723982596b0972b7fd8c9e0d14
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SimSim.Block"#) -}
154d136d956d8aad8219ebf4c333026a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "simsim-0.1.0.0-KAtxr7wc8AtIoXggvLGZsd"#) -}
9aadd58519ace323b32a8a94b3067184
  data Block
    = Source | Sink | FGI | Machine GHC.Types.Int | Queue GHC.Types.Int
instance GHC.Classes.Eq [SimSim.Block.Block]
  = SimSim.Block.$fEqBlock
instance GHC.Classes.Ord [SimSim.Block.Block]
  = SimSim.Block.$fOrdBlock
instance GHC.Show.Show [SimSim.Block.Block]
  = SimSim.Block.$fShowBlock
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

